// ==UserScript==
// @name        uw-fix
// @match       https://apps.uworld.com/courseapp/usmle/v*/testinterface/launchtest/*
// @grant       none
// @version     1.0.10
// @icon        https://www.google.com/s2/favicons?sz=64&domain=uworld.com
// @require     http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js
// @require     https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js
// @require     https://punya10.github.io/rx/uwfns2.js
// @grant       GM_addStyle
// @author      Punya Jain
// @description UWORLD-Anki Cards finder
// @downloadURL https://punya10.github.io/rx/uw-fix.user.js
// @updateURL   https://punya10.github.io/rx/uw-fix.user.js
// ==/UserScript==
var uw = new UW();
const ANKIURL = 'https://werk.asuscomm.com:8769';
var ppts = [3000, 5000, 8000];
var flexBasis = 31;
var lnav = "#leftNavigator > .body";


function swipedetect(el, callback){
  
    var touchsurface = el,
    swipedir,
    startX,
    startY,
    distX,
    distY,
    threshold = 150, //required min distance traveled to be considered swipe
    restraint = 100, // maximum distance allowed at the same time in perpendicular direction
    allowedTime = 300, // maximum time allowed to travel that distance
    elapsedTime,
    startTime,
    handleswipe = callback || function(swipedir){}
  
    touchsurface.addEventListener('touchstart', function(e){
        var touchobj = e.changedTouches[0]
        swipedir = 'none'
        dist = 0
        startX = touchobj.pageX
        startY = touchobj.pageY
        startTime = new Date().getTime() // record time when finger first makes contact with surface
        //e.preventDefault()
    }, false)
  
    touchsurface.addEventListener('touchmove', function(e){
        //e.preventDefault() // prevent scrolling when inside DIV
    }, false)
  
    touchsurface.addEventListener('touchend', function(e){
        var touchobj = e.changedTouches[0]
        distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface
        distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface
        elapsedTime = new Date().getTime() - startTime // get time elapsed
        if (elapsedTime <= allowedTime){ // first condition for awipe met
            if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint){ // 2nd condition for horizontal swipe met
                swipedir = (distX < 0)? 'Left' : 'Right' // if dist traveled is negative, it indicates left swipe
            }
            else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint){ // 2nd condition for vertical swipe met
                swipedir = (distY < 0)? 'Up' : 'Down' // if dist traveled is negative, it indicates up swipe
            }
        }
        handleswipe(swipedir)
        //e.preventDefault()
    }, false)
}
  
//USAGE:
/*
var el = document.getElementById('someel')
swipedetect(el, function(swipedir){
    swipedir contains either "none", "left", "right", "top", or "down"
    if (swipedir =='left')
        alert('You just swiped left!')
})
*/


var myStyle = `
dialog { box-shadow: 0 2px 5px rgba(0,0,0,0.3); border: none; border-radius: 10px; opacity: 0.69; }
dialog::backdrop { background: linear-gradient(rgba(0,0,0,0.1), rgba(0,0,0,0.4)); animation: fade-in 0.5s; }
@keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
}
.question-content { max-width: 100% !important; }
#first-explanation > p:last-of-type { padding: 1em; font-size: 1.42691em; background-color: #ff007f; text-indent: -1.0em; padding-left: 2.4em; color: yellow; }
/*#first-explanation > p:last-of-type > .textHighlight { color: #0000ff; }*/
.highlighter-pink {
  color: #ff007f !important;
}
.highlight-color-1 { color: #0000ff !important; }
.highlight-color-4 { background-color: #ff007f !important; color: #ffff00 !important; }
.common-content, .left-content, .right-content, .common-content .question-content.split-screen {
    width: unset !important;
}
/*.left-content {
    flex: 0 0 ${flexBasis}%;
}
.right-content {
    flex: 0 0 69% !important;
}*/
.common-content {
    flex-direction: column !important;
}
.left-content {
    flex-direction: row !important;
}
.vertical-divider-line, .vertical-divider-line .wide-for-mouse-events {
    width: 100% !important;
    height: 2px !important;
}

html{
  overscroll-behavior: none;
  overflow: hidden;
}
body {
    /*overflow-y: scroll;*/
}
nbme-header {
  transition: top 0.3s;
}
nbme-footer {
  transition: bottom 0.3s;
}
.fullvh {
  height: 100vh !important;
}
`;




//document.querySelector('.common-content').style.width = document.querySelector('.left-content').style.width = document.querySelector('.right-content').style.width = document.querySelector('.common-content .question-content.split-screen').style.width = 'unset'
//document.querySelector('.left-content').style.flex = document.querySelector('.right-content').style.flex = '0 0 50%;'
//document.querySelector('.common-content').style.flexDirection = 'column';
//document.querySelector('.left-content').style.flexDirection = 'row';
//document.querySelector('.vertical-divider-line').style.width = '100%';
//document.querySelector('.vertical-divider-line').style.height = '2px';
//document.querySelector('.vertical-divider-line .wide-for-mouse-events').style.width = '100%';

function addcss(css) {
    var head = document.getElementsByTagName('head')[0];
    head.innerHTML = '<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, height=device-height">' + head.innerHTML;

    var s = document.createElement('style');
    s.setAttribute('type', 'text/css');
    s.appendChild(document.createTextNode(css));
    head.appendChild(s);
    return s;
}


/////////////////////////////////////
// TIMER CODE

var DL = {"--bgcolor": "#222230", "--bgcolor2": "#333340", "--color": "#eeeeff", "--coloraccent": "#b2b2ff", "color-scheme": "dark", "--focus": "#d64f4f", "--short": "#26baba", "--long": "#5fbbe6", "defaccent": "lavender"}

var fullname = {
    focus: "Focus",
    short: "Keep Going!",
    long: "You got this!",
};
var ts = 42;
var config = { 
    focus: ts,
    short: ts,
    long: (5 * 60 * 1000),
    longGap: 40,
    maxRounds: 60
};

var roundInfo = {
    t: 0,
    focusNum: 1,
    current: "focus",
    running: false,
};

function getColor(value) {
    //value from 0 to 1
    if (value > 1) { value = 1; }
    if (value < 0) { value = 0; }
    var hue = ((1 - value) * 120).toString(10);
    return ["hsl(", hue, ",100%,50%)"].join("");
}




let q = new SpeechSynthesisUtterance();
q.text = "Move On!"
const quotes = ["82 82 82 82 82. You Got This. Saying It Again, 82. Go!", "Almost There", "Believe you can and you’re halfway there", "Disneyland!", "Do You Want To Go See Your Friends?", "Do You Want To Go To Disneyland?", "Do You Want To Go To EDC?", "Do You Want To Go To LA?", "Do You Want To Go To Vegas?", "Don’t wait. The time will never be just right", "EDC! EDC! EDC! EDC! Let's go to EDC!", "Every accomplishment starts with the decision to try", "Every moment is a fresh beginning", "Finish Up!", "Happiness is not by chance, but by choice", "Hurry Along!", "If things go wrong, don’t go with them", "If you can dream it, you can do it", "Imagine how good life could be if only you did what needed to be done!", "Just A Little More", "Keep Going", "Keep It Super Simple", "LA!", "Let's Get This Done!", "Let's Go!", "Life is like riding a bicycle. To keep your balance, you must keep moving", "Look Straight Ahead 82", "Move On", "Nothing is impossible. The word itself says “I’m possible!\"", "Problems are not stop signs, they are guidelines.", "Quickly Now", "Simplicity is the ultimate sophistication", "Success is not final, failure is not fatal: it is the courage to continue that counts", "Thank you, Next!", "There is no substitute for hard work", "Vegas!", "You Can Do It!", "You can’t cross the sea merely by standing and staring at the water", "You Got This!", "You Rock!"];
function sayQuote() {
    q.text = quotes[Math.floor(Math.random() * quotes.length)];
    //window.speechSynthesis.speak(q);
}


var canvas;
var ctx;
var video;
var ivl;
var isOn;

function initTimer() {
  
  isOn = document.createElement("INPUT");
  isOn.setAttribute("type", "checkbox");
  isOn.id = "isOn";
  isOn.checked = confirm("turn on timer?");
  
  var l = document.createElement("label");
  l.setAttribute("for", "isOn");
  l.textContent = "TimerOn?";
  document.querySelector(lnav).appendChild(isOn);
  document.querySelector(lnav).appendChild(l);
  
  
  
  
  canvas = document.createElement("canvas");
  canvas.id = "canvas";
  canvas.width = canvas.height = 400;
  ctx = canvas.getContext("2d");
  
  video = document.createElement("video");
  canvas.style.height = video.style.height = "100%";
  canvas.style.width = video.style.width = "auto";
  
  
  video.autoplay = true;
  video.controls = false;
  video.playsInline = true;
  video.addEventListener("play", () => {
    //isOn.checked = true;
    if (!roundInfo.running) runRound();
    console.log('playing');
  });
  video.addEventListener("pause", () => {
    //isOn.checked = false;
    console.log('pausing');
    if (roundInfo.running) stopRound();
  });
  

  canvas.onclick = video.onclick = () => {
    if (document.pictureInPictureElement) {
        return;
    }
    if (document.pictureInPictureEnabled) {
        video.requestPictureInPicture();
    }
  }
  
  document.querySelector('.question-details').parentNode.appendChild(canvas);
  document.querySelector('nbme-footer > div > div.d-flex.align-items-center.col-5').appendChild(video);
  
  var stream = canvas.captureStream();
  video.srcObject = stream;
  
//video.addEventListener("seeked", () => console.log('seek   END: ' + video.currentTime));
//video.addEventListener("seeking", () => console.log('seek BEGIN: ' + video.currentTime));
//video.onenterpictureinpicture = () => console.log("Entering PIP");
//video.onleavepictureinpicture = () => console.log("Leaving PIP");
//video.onfullscreenchange = () => console.log("Changing to FullScreen");
    
}


function loop() {
    //if (roundInfo.running) {
    let seconds = config[roundInfo.current] - roundInfo.t;
    let percent = roundInfo.t / config[roundInfo.current];
    let bg = getColor(percent);
    if (seconds < 0) {
      //alert("should restart since loop ended with secs < 0" + seconds + "");
        //nextRound();
        return;
    }
    
    ctx.fillStyle = DL["--bgcolor"];
    ctx.fillRect(0, 0, 400, 400);

    ctx.fillStyle = DL["--color"];
    ctx.font = "80px monospace";

    ctx.textAlign = "center";
    let timestr = Math.floor(seconds / 60).toString().padStart(2, "0") + ":" + (seconds % 60).toString().padStart(2, "0");
    ctx.fillText(timestr, 200, 200, 280);

    ctx.font = "69px monospace";
    ctx.fillStyle = getColor((roundInfo.focusNum-1)/3);
    ctx.fillText(("#"+(roundInfo.focusNum-1)) || fullname[roundInfo.current].toUpperCase(), 200, 260, 280);

    ctx.strokeStyle = DL["--coloraccent"];
    ctx.strokeStyle = bg;
    ctx.lineWidth = 4;
    ctx.beginPath();
    ctx.arc(200, 200, 180, 0, Math.PI * 2);
    ctx.stroke();

    ctx.strokeStyle = DL["--" + roundInfo.current];
    ctx.strokeStyle = bg;
    ctx.lineWidth = 16;
    ctx.beginPath();
    ctx.arc(200, 200, 180, -Math.PI / 2, (1 - roundInfo.t / config[roundInfo.current]) * Math.PI * 2 - Math.PI / 2);
    ctx.stroke();
    //}
}



function runRound(progressive = false) {
  if (isOn.checked) {
    sayQuote();
  }
    roundInfo.current = "focus";
    roundInfo.focusNum++;
    roundInfo.t = 0;
    roundInfo.running = true;
    video.play();
    if (ivl)
        clearInterval(ivl);

    ivl = setInterval(() => {
        roundInfo.t++
        if (roundInfo.t > config[roundInfo.current]) {
            roundInfo.t -= 1;
            //alert("NEED TO RESET!");
          	stopRound();
            runRound();
        }
        loop();
    }, 1000);
    loop();
 // }
}
function stopRound() {
    if (ivl) clearInterval(ivl);
    roundInfo.running = false;
}

/// END TIMER CODE
//////////////////////////////////////

// Perform all promises in the order
const waterfall = function (promises) {
    return promises.reduce(
        function (p, c) {
            // Waiting for `p` completed
            return p.then(function () {
                // and then `c`
                return c().then(function (result) {
                    return true;
                });
            });
        },
        // The initial value passed to the reduce method
        Promise.resolve([])
    );
};

//image crap
function extractAllText(str) {
    const re = /"(.*?)"/g;
    const result = [];
    let current;
    while (current = re.exec(str)) {
        result.push(current.pop());
    }
    return result.length > 0 ?
        result : [str];
}

function getTags(tags) {
    var filters = ["#FirstAid", "#B&B", "#SketchyMicro", "#SketchyPharm", "#SketchyPath", "#OME", "#Pixorize", "#SketchyBiochem", "#AMBOSS"];
    var result = {};
    filters.forEach(f => {
        var found = tags.filter(t => t.includes(f));
        if (found.length > 0) {
            result[f] = found;
        }
    })
    return result;
}

const akx = async (action = 'deckNames', params = {}, version = 6) => await axios.post(ANKIURL, { action, version, params }).then(r => r.data.result).catch(r => r.data.error);

function waitEl(sel) {
    return new Promise(resolve => {
        if (document.querySelector(sel)) {
            resolve(document.querySelector(sel));
            return;
        }
        new MutationObserver((mutations, observer) => {
            if (document.querySelector(sel)) {
                resolve(document.querySelector(sel));
                observer.disconnect();
                observer.takeRecords();
            }
        }).observe(document.documentElement, {
            childList: true,
            subtree: true
        });
    });
}

function waitElUnhide(sel) {
    return new Promise(resolve => {
        if (document.querySelector(sel) && !document.querySelector(sel).hasAttribute("hidden")) {
            resolve(document.querySelector(sel));
            return;
        }
        new MutationObserver((mutations, observer) => {
            if (document.querySelector(sel) && !document.querySelector(sel).hasAttribute("hidden")) {
                resolve(document.querySelector(sel));
                observer.disconnect();
                observer.takeRecords();
            }
        }).observe(document.documentElement, {
            childList: true,
            subtree: true
        });
    });
}



function onCharChange(el, cb) {
    if (el) {
        cb(el.textContent.replace(/[^\d]/g, ''));
        //return;
    }
    new MutationObserver((mutations, observer) => {
        cb(el.textContent.replace(/[^\d]/g, ''));
    }).observe(el, {
        subtree: true,
        characterData: true,
        characterDataOldValue: true
    });
}

function onAttrChange(qid, el, filter, cb) {
    if (!el.hasAttribute(filter) && document.querySelector('.question-id').textContent.replace(/[^\d]/g, '') == qid) {
        cb(el);
        return;
    }
    new MutationObserver((mutations, observer) => {
        if (document.querySelector('.question-id').textContent.replace(/[^\d]/g, '') != qid) {
            observer.disconnect();
            observer.takeRecords();
            return;
        }
        if (!el.hasAttribute(filter)) {
            cb(el);
            observer.disconnect();
            observer.takeRecords();
        }
    }).observe(el, {
        attributeFilter: [filter],
        attributeOldValue: true
    });
}


function ambossify(auto = false) {
    if (!window.ambossController) {
        var btn = document.querySelector('#AMBOSSIFY') || document.createElement("button");

        if (!document.querySelector('#AMBOSSIFY')) {
            btn.textContent = 'AMBOSSIFY';
            btn.id = "AMBOSSIFY";
            btn.style.marginTop = "1em";
            btn.style.marginBottom = "1em";
            btn.onclick = () => {
                if (window.ambossController) {
                    window.ambossController.ambossifyCard();
                } else {
                    document.querySelector('common-content').id = 'qa';
                    var s = document.createElement('script');
                    s.type = "module";
                    s.setAttribute("data-addon", "eyJhbm9uSWQiOiAiNDM2NmVhYjItZDNmNS00NGQ5LTkxZjUtNjA1YmVjNDg2NTNmIiwgInVzZXJJZCI6ICJDM1BXcWtlbDAiLCAidG9rZW4iOiAiZXlKaGJHY2lPaUpTVXpVeE1pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SmxlSEFpT2pFMk9ETTBPVEExTWpRc0ltbHpjeUk2SWtGTlFrOVRVeUlzSW5OMVlpSTZJa016VUZkeGEyVnNNQ0lzSW1saGRDSTZNVFk0TURnNU9EVXlOSDAuT0JGUnNHYTVNbFF6TUhDOV9jU2djMFlJaWdHaEV6RnJvUnNVaU1MakNKYUxHLVpmQ1N0QTROSjJEN3VqQWgySE1lbHUyWERDODlXb2xuV2VBdmtoRWFmZlFfcUJiMVNDNmJvN0RGNTFXdmNtOUtCY0JJbVcxQzlyNWtTQUF4MzhPTi1oa3pRaGhLbV84aW92MnRraVotRUpCUUpJcG5JSk5CNVZGVUk2Vzd6azh0MmhyYWlWdTVreDFSeWJxbFRCZmtxcHhlMWN5bHRXR21yT1JvR01qaTRDQ0k3MHd5VWwyWUtLLTFBRGh3NkUwNDNGc1p4TXpQUnEtRkJWdmNaLWk1UkFiVHJLemYwTWItZVhOZ2k0Y0d4WE04WGIwRlI3czBfTG42QWF2QWk0NkpEWVlFSXZUOTdYZm9aeTZoQ3VOM2RxZU1oZnhrTFQ4eWRzNlM4NFNRIn0=");
                    s.id = "amboss-snippet";
                    s.onload = () => {
                        console.log("AMBOSS LOADED");
                        //setTimeout(() => s.remove(), 1000);
                    }
                    s.src = "https://content-gateway.us.production.amboss.com/amboss.js";
                    document.head.appendChild(s);
                }
            }
            document.querySelector(lnav).appendChild(btn);
        }
        if (auto) {
            btn.click();
        }
    } else {
        window.ambossController.ambossifyCard();
    }
}

function copyToClipboard(text) {
    navigator.clipboard.writeText(text);
}



function initHLs(last = "highlighter-yellow") {
    function lastHl(color = last) {
        if (!color) {
            color = window.hlbtns.colors[Math.floor(Math.random() * window.hlbtns.colors.length)];
        }
        window.hlbtns.last = window.hlbtns[color];
        
        window.hlbtns.lastTs = Date.now();
    }
    var hb = {};
    hb.hls = [...document.querySelectorAll("i.fa-circle.fa-stack-1x.fas.highlighter")];
    hb.hls.forEach(h => {
        var hn = h.classList.value.match(/highlighter-[a-z]*/g)[0];
        hb[hn] = {
            name: hn,
            short: hn.charAt(12),
            el: h,
            color: window.getComputedStyle(h, null).getPropertyValue("color")
        };


        // hb[hn].btn = document.createElement("div");

        hb[hn].btn = document.createElement("button");
        hb[hn].btn.id = hb[hn].name;
        hb[hn].btn.textContent = hb[hn].short;
        hb[hn].btn.style.backgroundColor = hb[hn].color;
        hb[hn].btn.style.width = '33%';
        hb[hn].btn.action = (e) => {
            //if (hb[hn].btn.contains(e.target)) {
            console.log("Clicked ME correctly", e);
            //lastHl(hn);
            window.hlbtns.last = hb[hn];
            console.log("clicked", hb[hn], window.hlbtns.last);
            h.click();
            //}

        }
        //hb[hn].btn.addEventListener('mouseup', btnFn);
        hb[hn].btn.addEventListener('click', hb[hn].btn.action);
        //hb[hn].btn = btn;
        document.querySelector(lnav).appendChild(hb[hn].btn);
    });
    window.hlbtns = hb;
    window.hlbtns.colors = Object.keys(window.hlbtns).filter(k => k.startsWith("highlighter-"));
    //lastHl();
    window.hlbtns.last = window.hlbtns[window.hlbtns.colors[Math.floor(Math.random() * window.hlbtns.colors.length)]];
    window.hlbtns.lastTs = Date.now();

    document.querySelector("common-content").parentNode.ontouchstart = (e) => uw.clearSelection(0);
    document.querySelector("common-content").parentNode.ontouchend = (e) => {
        var curStr = window.getSelection().toString();
        if (curStr.length > 0) {
          

            if (Date.now() - window.hlbtns.lastTs > 10000) {
                //window.hlbtns.last = window.hlbtns[
              var randC = window.hlbtns.colors[Math.floor(Math.random() * window.hlbtns.colors.length)];
              window.hlbtns.last = window.hlbtns[randC];
            }
          window.hlbtns.colors.forEach(c => {
            window.hlbtns[c].btn.style.border = '1px solid white';
          })
          window.hlbtns.last.btn.style.border = '1px solid black';
          window.hlbtns.lastTs = Date.now();
            //    lastHl();
           // }
            //copyToClipboard(window.getSelection().toString());
          
            window.hlbtns.last.btn.action(e);
            uw.clearSelection(10);
            
            
          
            //document.querySelectorAll("i.fa-circle.fa-stack-1x.fas.highlighter")[0].click();
            //setTimeout(() => window.getSelection().removeAllRanges(), 50);
        }
    }

}

function makePopups(qid) {
    window.qpps.cancelAll();
    if (document.querySelector('#explanation-container').hasAttribute("hidden")) { //explaination hidden, so make popups!
        window.qpps.create({ contents: "20", delay: 20000, timeout: 691, bg: '#01FF70' });
        window.qpps.create({ contents: "40", delay: 40000, timeout: 691, bg: '#FFDC00' });
        window.qpps.create({ contents: "60...MOVE ON!", delay: 60000, timeout: 691, bg: '#F012BE' });
    }
}



function fixAnsChoices() {
    //const getAns = (a)=>`${a}: '${[...document.querySelectorAll('[id^="answerhighlight"]')][`${a}`.charCodeAt(0) - 65].textContent}'`;
    [...document.querySelectorAll('strong')].filter(c => c.textContent.startsWith('(Choice')).forEach(c => {
        console.log(c.textContent);
        var str = c.textContent;
        str.match(/ ([A-Z])/g).forEach(a => { str = str.replace(a, "" + a + ": '" + [...document.querySelectorAll('[id^="answerhighlight"]')][a.charCodeAt(1) - 65].textContent + "'") })
        c.textContent = str;
    });
}


async function processQuestion() {
    const q = {};
    q.id = document.querySelector("span.question-id").textContent.replace(/[^\d]/g, '');
    q.query = `tag:#AK_Step1_v12::#UWorld::${q.id}`;
    q.nids = await akx('findNotes', { "query": q.query });
    q.ninfo = await akx('notesInfo', { "notes": q.nids });
    q.tags = [...new Set(q.ninfo.flatMap(note => note.tags))];
    q.imgs = {};

    async function getImgs(f) {
        var i = [...new Set(q.ninfo.flatMap(note => extractAllText(note.fields[f].value)))].filter(e => e);
        var p = i.map(img => akx('retrieveMediaFile', { "filename": img }));
        return Promise.all(p).then(data => {
            if (data.filter(d => d).length > 0) { q.imgs[f] = [] }
            data.forEach((d, di) => { if (d) { q.imgs[f].push([i[di], `data:image/png;base64,${d}`]) } });
        });
    }

    q.related = getTags(q.tags);
    q.path = Object.fromEntries([...document.querySelectorAll('.standard-header')].map(s => [s.textContent, s.previousSibling.textContent]));
    q.path.id = q.id;
    await getImgs('Sketchy');
    await getImgs('First Aid');
    await getImgs('Pixorize');

    async function addToQueue() {
        var cards = q.ninfo.flatMap(n => n.cards);
        var destination = ['UW', window.location.pathname.replace('/courseapp/usmle/v12/testinterface/launchtest/9300640/', '').split('/')[0]].join('::');
        console.log(destination, cards);
    }

    await addToQueue();

    function show() {
        if (document.querySelector('#ankiInfo')) {
            document.querySelector('#ankiInfo').remove();
        }
        var ankiInfo = document.createElement("div");
        ankiInfo.id = 'ankiInfo';

        q.imgs["First Aid"] && q.imgs["First Aid"].forEach(i => {
            var img = document.createElement("img");
            img.src = i[1];
            img.style.maxWidth = "unset";
            img.style.width = "100%";
            ankiInfo.appendChild(img);
        })
        //document.querySelector(".standards").parentElement.insertBefore(ankiInfo, document.querySelector(".standards"));
        document.querySelector('#first-explanation').appendChild(ankiInfo);
    }

    show();
    console.log(await q);

    //document.querySelector('#first-explanation > p:last-of-type').innerHTML = document.querySelector('#first-explanation > p:last-of-type').innerHTML.replace(/(\.(&nbsp;|\s)*|<br>[\n"]*)/g, '.<br>&#8226; ').replace(/\.<br>&#8226; $/g,'.');
    return await q;
}

//var lnav = "#leftNavigator";



function initSync(auto = false, confirm = false) {
    akx().then(console.log).catch(console.error);
    var btn = document.createElement("button");
    btn.textContent = 'SYNC';
    btn.style.width = "100%";
    btn.style.marginTop = "1em";
    btn.style.marginBottom = "1em";
    btn.onclick = () => {
        let w = window.open('http://192.168.1.127:8766/sync', "_blank");
        setTimeout(() => w.close(), 1000);
    }
    document.querySelector(lnav).appendChild(btn);
    if (auto) {
        btn.click();
    }
    if (confirm) {
        (confirm("Sync?")) ? btn.click() : null;
    }
}


var lastqid = 0;
waitEl('common-content').then(cc => {
    var myCss = addcss(myStyle);
    //window.scrollTo(0, 1);
    window.scrollTo(0, 1);
    //document.querySelector('.nbme-layout .nbme-content').classList.add('fullvh');
    //document.querySelector('.nbme-layout .nbme-content').addEventListener('touchstart', (e) => {
    //document.querySelector('.nbme-layout .nbme-content').classList.remove('fullvh');
     //temporary
    //document.querySelector('nbme-header').style.display = 'block';
    //document.querySelector('nbme-footer').style.display = 'block';
    
    //setTimeout(() => {
      //document.querySelector('.nbme-layout .nbme-content').classList.add('fullvh');
      //document.querySelector('nbme-header').style.display = 'none';
      //document.querySelector('nbme-footer').style.display = 'none';
    //}, 3000);
    
  
  //});

  
  
    /*window.addEventListener('touchmove', ev => {
      ev.preventDefault();
      ev.stopImmediatePropagation();
    }, { passive: false });*/
    window.qpps = new Popups();

    initSync(false, false);
    initHLs();
    ambossify(false);
	initTimer();
  flexBasis = Math.floor((document.querySelector('#questionText > p').getBoundingClientRect().bottom/window.innerHeight)*100);
  document.querySelector(".left-content").style.flexBasis = `${flexBasis}%`;
  document.querySelector('.vertical-divider-line').ontouchmove = document.querySelector('.vertical-divider-line').ontouchend = (e) => {
    console.log(window.innerHeight, e.changedTouches[0]);
    flexBasis = Math.floor((e.changedTouches[0].clientY/window.innerHeight)*100);
    document.querySelector(".left-content").style.flexBasis = `${flexBasis}%`;
    console.log(flexBasis);
  }
  document.querySelector('.vertical-divider-line').onclick = (e) => {
    
    flexBasis = Math.floor((document.querySelector('#questionText > p').getBoundingClientRect().bottom/window.innerHeight)*100);
    document.querySelector(".left-content").style.flexBasis = `${flexBasis}%`;

    console.log("adjusting flexBasis",flexBasis);
  }
  
  
  window.ontouchmove = (e) => {
    if (e.changedTouches[0].clientX > window.innerWidth*0.969142) {
      e.preventDefault()
      //console.log(100*e.clientY/window.innerHeight)
      //console.log(window.innerHeight, e.changedTouches[0]);
      flexBasis = Math.floor((e.changedTouches[0].clientY/window.innerHeight)*100);
      document.querySelector(".left-content").style.flexBasis = `${flexBasis}%`;
      console.log(flexBasis);
    }
    
  }
  
  
  swipedetect(document.querySelector('.right-content'), function(swipedir){
        if (swipedir != 'none') {
          //alert(swipedir);
          if (swipedir == "Left") {
            document.querySelector('a[aria-label="Navigate to Previous Question"]').click();
          }
          if (swipedir == "Right") {
            document.querySelector('a[aria-label="Navigate to Next Question"]').click();
          }
            //swipedir// naming convention is "leftarrow.png", "rightarrow.png" etc
          //window.dispatchEvent(new KeyboardEvent({key: `Arrow${swipedir}`}));
            
        }
    })
/*var choices = ["q","w","e","r","t","y","u","i","o"];
var cstrike = ["a","s","d","f","g","h","j","k","l"];
window.addEventListener('keydown', (e) => {
  if [...choices, ...cstrike, ' ', 'm'].includes(e.key) {
  	//e.preventDefault();
    //e.stopImmediatePropagation();
    alert(e.key);
  }
  /*if (choices.includes(e.key)) {
    console.log(e.key,  document.querySelectorAll("mat-radio-button")[choices.indexOf(e.key)])
    //document.querySelectorAll("mat-radio-button")[choices.indexOf(e.key)].click();
  }
  if (cstrike.includes(e.key)) {
    document.querySelector(`[id^="answerhighlight${cstrike.indexOf(e.key)+1}"`).dispatchEvent(new MouseEvent("mouseup"));
  }
  if (e.code == 'Space' || e.code == 'KeyM') {
    document.querySelector('a.bookmark-question').click();
  }
});*/

var choices = ["q","w","e","r","t","y","u","i","o"];
var cstrike = ["a","s","d","f","g","h","j","k","l"];
var mark = [" ","m"];
window.addEventListener('keydown', (e) => {
  var all = [...choices, ...cstrike, ...mark];
  if (all.includes(e.key)) {
    e.preventDefault();
    e.stopImmediatePropagation();
    e.stopPropagation();

    if (choices.includes(e.key) && document.querySelectorAll("mat-radio-button")[choices.indexOf(e.key)]) {
      var elem = document.querySelectorAll("label.mat-radio-label")[choices.indexOf(e.key)]
      console.log(e.key, "answer", elem);
      elem.click();
    }
    if (cstrike.includes(e.key) && document.querySelector(`[id^="answerhighlight${cstrike.indexOf(e.key)+1}"`)) {
      var elem = document.querySelector(`[id^="answerhighlight${cstrike.indexOf(e.key)+1}"`);
      console.log(e.key, "strikeout", elem);
      elem.dispatchEvent(new MouseEvent("mouseup"));
    }
    if (e.code == 'Space' || e.code == 'KeyM') {
      console.log(e.key, "mark");
      document.querySelector('a.bookmark-question').click();
    }
  }
}, true);
  

    waitEl('.question-id').then(qel => {
        onCharChange(qel, async (qid) => {
            //Question Loaded!
            //makePopups(qid);
          
            flexBasis = Math.floor((document.querySelector('#questionText > p').getBoundingClientRect().bottom/window.innerHeight)*100);
            document.querySelector(".left-content").style.flexBasis = `${flexBasis}%`;

            console.log("adjusting flexBasis",flexBasis);
  
          
            if (roundInfo.running) stopRound();
          	roundInfo.focusNum = 1;
            if (!roundInfo.running) runRound();
            //if (roundInfo.running) stopRound();
			
            console.log(qid);

            if (qid != lastqid) {
                //makePopups();
                window.q = await processQuestion();
                lastqid = qid;
            }

            waitElUnhide('#explanation-container').then(exp => {
                console.log('EXPL showing, exp');
              
              	//alert("here");
              	
                if (roundInfo.running) stopRound();
              	if (!roundInfo.running) runRound();

                //window.qpps.cancelAll();
                fixAnsChoices();
                ambossify(true);
                exp.innerHTML = exp.innerHTML.replace(/increas[a-z]*/gi, '↑');
                exp.innerHTML = exp.innerHTML.replace(/decreas[a-z]*/gi, '↓');
              
            });


            onAttrChange(qid, document.querySelector('#explanation-container'), "hidden", (e) => {
                //Explaination Loaded!

                console.log('[6.oAc]', e);
                //if (window.ambossController) window.ambossController.ambossifyCard();
                //makePopups();
                //if (document.querySelector("span.question-id")) {
                //var curr = document.querySelector("span.question-id").textContent.replace(/[^\d]/g, '');

            })
        })
    });
});


